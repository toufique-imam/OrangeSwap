/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ORGMineInterface extends utils.Interface {
  functions: {
    "addLpToken(address,uint256,bool)": FunctionFragment;
    "claim(address)": FunctionFragment;
    "claimAll()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "emergencyWithdraw(address)": FunctionFragment;
    "massUpdatePools()": FunctionFragment;
    "setLpToken(address,uint256,bool)": FunctionFragment;
    "setReward(uint256,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePool(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawAll(address)": FunctionFragment;
    "_NEW_OWNER_()": FunctionFragment;
    "_OWNER_()": FunctionFragment;
    "getAllPendingReward(address)": FunctionFragment;
    "getDlpMiningSpeed(address)": FunctionFragment;
    "getPendingReward(address,address)": FunctionFragment;
    "getPid(address)": FunctionFragment;
    "getRealizedReward(address)": FunctionFragment;
    "getUserLpBalance(address,address)": FunctionFragment;
    "lpTokenRegistry(address)": FunctionFragment;
    "orgPerBlock()": FunctionFragment;
    "orgRewardVault()": FunctionFragment;
    "poolInfos(uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "realizedReward(address)": FunctionFragment;
    "startBlock()": FunctionFragment;
    "totalAllocPoint()": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLpToken",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [string]): string;
  encodeFunctionData(functionFragment: "claimAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "massUpdatePools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLpToken",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdrawAll", values: [string]): string;
  encodeFunctionData(
    functionFragment: "_NEW_OWNER_",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_OWNER_", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPendingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDlpMiningSpeed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRealizedReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLpBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lpTokenRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "orgPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orgRewardVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolInfos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "realizedReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addLpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "massUpdatePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLpToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updatePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_NEW_OWNER_",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_OWNER_", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDlpMiningSpeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRealizedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lpTokenRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orgPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orgRewardVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "realizedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "OwnershipTransferPrepared(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferPrepared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type OwnershipTransferPreparedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferPreparedEventFilter =
  TypedEventFilter<OwnershipTransferPreparedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; pid: BigNumber; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface ORGMine extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ORGMineInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReward(
      _orgPerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAll(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _NEW_OWNER_(overrides?: CallOverrides): Promise<[string]>;

    _OWNER_(overrides?: CallOverrides): Promise<[string]>;

    getAllPendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDlpMiningSpeed(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingReward(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPid(_lpToken: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getRealizedReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserLpBalance(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lpTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orgPerBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    orgRewardVault(overrides?: CallOverrides): Promise<[string]>;

    poolInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accORGPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    realizedReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAllocPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;
  };

  addLpToken(
    _lpToken: string,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massUpdatePools(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLpToken(
    _lpToken: string,
    _allocPoint: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReward(
    _orgPerBlock: BigNumberish,
    _withUpdate: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePool(
    _pid: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _lpToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAll(
    _lpToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _NEW_OWNER_(overrides?: CallOverrides): Promise<string>;

  _OWNER_(overrides?: CallOverrides): Promise<string>;

  getAllPendingReward(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDlpMiningSpeed(
    _lpToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingReward(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPid(_lpToken: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRealizedReward(
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserLpBalance(
    _lpToken: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lpTokenRegistry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  orgPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  orgRewardVault(overrides?: CallOverrides): Promise<string>;

  poolInfos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      allocPoint: BigNumber;
      lastRewardBlock: BigNumber;
      accORGPerShare: BigNumber;
    }
  >;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  realizedReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
  >;

  callStatic: {
    addLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(_lpToken: string, overrides?: CallOverrides): Promise<void>;

    claimAll(overrides?: CallOverrides): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    massUpdatePools(overrides?: CallOverrides): Promise<void>;

    setLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setReward(
      _orgPerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePool(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAll(_lpToken: string, overrides?: CallOverrides): Promise<void>;

    _NEW_OWNER_(overrides?: CallOverrides): Promise<string>;

    _OWNER_(overrides?: CallOverrides): Promise<string>;

    getAllPendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDlpMiningSpeed(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingReward(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPid(_lpToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRealizedReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLpBalance(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orgPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    orgRewardVault(overrides?: CallOverrides): Promise<string>;

    poolInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        allocPoint: BigNumber;
        lastRewardBlock: BigNumber;
        accORGPerShare: BigNumber;
      }
    >;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    realizedReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; rewardDebt: BigNumber }
    >;
  };

  filters: {
    "Claim(address,uint256)"(
      user?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(user?: string | null, amount?: null): ClaimEventFilter;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): DepositEventFilter;

    "OwnershipTransferPrepared(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferPreparedEventFilter;
    OwnershipTransferPrepared(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferPreparedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      pid?: BigNumberish | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReward(
      _orgPerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAll(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _NEW_OWNER_(overrides?: CallOverrides): Promise<BigNumber>;

    _OWNER_(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDlpMiningSpeed(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingReward(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPid(_lpToken: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRealizedReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLpBalance(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lpTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orgPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    orgRewardVault(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    realizedReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocPoint(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massUpdatePools(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLpToken(
      _lpToken: string,
      _allocPoint: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      _orgPerBlock: BigNumberish,
      _withUpdate: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePool(
      _pid: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _lpToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      _lpToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _NEW_OWNER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _OWNER_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPendingReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDlpMiningSpeed(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingReward(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPid(
      _lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRealizedReward(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLpBalance(
      _lpToken: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lpTokenRegistry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orgPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orgRewardVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolInfos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    realizedReward(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
