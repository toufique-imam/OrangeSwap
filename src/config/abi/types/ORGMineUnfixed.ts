/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ORGMineUnfixedInterface extends utils.Interface {
  functions: {
    "addRewardToken(address,uint256,uint256,uint256)": FunctionFragment;
    "claimReward()": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "exactTokensFromVault(address,uint256)": FunctionFragment;
    "exactTokensOfThis(address,uint256)": FunctionFragment;
    "init(address)": FunctionFragment;
    "setClaimEnable(bool)": FunctionFragment;
    "setEndBlock(uint256)": FunctionFragment;
    "setReward(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawLeftOver(uint256)": FunctionFragment;
    "_TOKEN_()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "claimEnable()": FunctionFragment;
    "getPendingReward(address)": FunctionFragment;
    "getRewardToken()": FunctionFragment;
    "getVaultDebt()": FunctionFragment;
    "owner()": FunctionFragment;
    "rewardTokenInfo()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "userInfo(address)": FunctionFragment;
    "veiwRewardReserve()": FunctionFragment;
    "veiwTotalReward()": FunctionFragment;
    "viewAmountOfThis(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactTokensFromVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exactTokensOfThis",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setClaimEnable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLeftOver",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_TOKEN_", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimEnable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDebt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rewardTokenInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "veiwRewardReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "veiwTotalReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewAmountOfThis",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exactTokensFromVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactTokensOfThis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setClaimEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLeftOver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_TOKEN_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimEnable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "veiwRewardReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "veiwTotalReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAmountOfThis",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardTokenAdded(address)": EventFragment;
    "UpdateEndBlock(uint256)": EventFragment;
    "UpdateReward(uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawLeftOver(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateEndBlock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLeftOver"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { user: string; reward: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RewardTokenAddedEvent = TypedEvent<[string], { token: string }>;

export type RewardTokenAddedEventFilter =
  TypedEventFilter<RewardTokenAddedEvent>;

export type UpdateEndBlockEvent = TypedEvent<
  [BigNumber],
  { endBlock: BigNumber }
>;

export type UpdateEndBlockEventFilter = TypedEventFilter<UpdateEndBlockEvent>;

export type UpdateRewardEvent = TypedEvent<
  [BigNumber],
  { rewardPerBlock: BigNumber }
>;

export type UpdateRewardEventFilter = TypedEventFilter<UpdateRewardEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { user: string; amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawLeftOverEvent = TypedEvent<[string], { owner: string }>;

export type WithdrawLeftOverEventFilter =
  TypedEventFilter<WithdrawLeftOverEvent>;

export interface ORGMineUnfixed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ORGMineUnfixedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactTokensFromVault(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exactTokensOfThis(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimEnable(
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEndBlock(
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReward(
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLeftOver(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _TOKEN_(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimEnable(overrides?: CallOverrides): Promise<[boolean]>;

    getPendingReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRewardToken(overrides?: CallOverrides): Promise<[string]>;

    getVaultDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        rewardVault: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        workThroughReward: BigNumber;
        lastFlagBlock: BigNumber;
      }
    >;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        userRewardPerSharePaid: BigNumber;
        userRewards: BigNumber;
        claimedRewards: BigNumber;
        lastStackedTime: BigNumber;
      }
    >;

    veiwRewardReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    veiwTotalReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewAmountOfThis(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addRewardToken(
    rewardToken: string,
    rewardPerBlock: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactTokensFromVault(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exactTokensOfThis(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimEnable(
    flag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEndBlock(
    newEndBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReward(
    newRewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLeftOver(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _TOKEN_(overrides?: CallOverrides): Promise<string>;

  balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimEnable(overrides?: CallOverrides): Promise<boolean>;

  getPendingReward(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRewardToken(overrides?: CallOverrides): Promise<string>;

  getVaultDebt(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  rewardTokenInfo(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      rewardToken: string;
      rewardVault: string;
      startBlock: BigNumber;
      endBlock: BigNumber;
      rewardPerBlock: BigNumber;
      accRewardPerShare: BigNumber;
      lastRewardBlock: BigNumber;
      workThroughReward: BigNumber;
      lastFlagBlock: BigNumber;
    }
  >;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      userRewardPerSharePaid: BigNumber;
      userRewards: BigNumber;
      claimedRewards: BigNumber;
      lastStackedTime: BigNumber;
    }
  >;

  veiwRewardReserve(overrides?: CallOverrides): Promise<BigNumber>;

  veiwTotalReward(overrides?: CallOverrides): Promise<BigNumber>;

  viewAmountOfThis(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(overrides?: CallOverrides): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    exactTokensFromVault(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exactTokensOfThis(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    init(token: string, overrides?: CallOverrides): Promise<void>;

    setClaimEnable(flag: boolean, overrides?: CallOverrides): Promise<void>;

    setEndBlock(
      newEndBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setReward(
      newRewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawLeftOver(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    _TOKEN_(overrides?: CallOverrides): Promise<string>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimEnable(overrides?: CallOverrides): Promise<boolean>;

    getPendingReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<string>;

    getVaultDebt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    rewardTokenInfo(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        rewardToken: string;
        rewardVault: string;
        startBlock: BigNumber;
        endBlock: BigNumber;
        rewardPerBlock: BigNumber;
        accRewardPerShare: BigNumber;
        lastRewardBlock: BigNumber;
        workThroughReward: BigNumber;
        lastFlagBlock: BigNumber;
      }
    >;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        userRewardPerSharePaid: BigNumber;
        userRewards: BigNumber;
        claimedRewards: BigNumber;
        lastStackedTime: BigNumber;
      }
    >;

    veiwRewardReserve(overrides?: CallOverrides): Promise<BigNumber>;

    veiwTotalReward(overrides?: CallOverrides): Promise<BigNumber>;

    viewAmountOfThis(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Claim(address,uint256)"(
      user?: string | null,
      reward?: null
    ): ClaimEventFilter;
    Claim(user?: string | null, reward?: null): ClaimEventFilter;

    "Deposit(address,uint256)"(
      user?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(user?: string | null, amount?: null): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RewardTokenAdded(address)"(token?: null): RewardTokenAddedEventFilter;
    RewardTokenAdded(token?: null): RewardTokenAddedEventFilter;

    "UpdateEndBlock(uint256)"(endBlock?: null): UpdateEndBlockEventFilter;
    UpdateEndBlock(endBlock?: null): UpdateEndBlockEventFilter;

    "UpdateReward(uint256)"(rewardPerBlock?: null): UpdateRewardEventFilter;
    UpdateReward(rewardPerBlock?: null): UpdateRewardEventFilter;

    "Withdraw(address,uint256)"(
      user?: string | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(user?: string | null, amount?: null): WithdrawEventFilter;

    "WithdrawLeftOver(address)"(owner?: null): WithdrawLeftOverEventFilter;
    WithdrawLeftOver(owner?: null): WithdrawLeftOverEventFilter;
  };

  estimateGas: {
    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactTokensFromVault(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exactTokensOfThis(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimEnable(
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEndBlock(
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReward(
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLeftOver(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _TOKEN_(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimEnable(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultDebt(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenInfo(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    veiwRewardReserve(overrides?: CallOverrides): Promise<BigNumber>;

    veiwTotalReward(overrides?: CallOverrides): Promise<BigNumber>;

    viewAmountOfThis(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardToken(
      rewardToken: string,
      rewardPerBlock: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactTokensFromVault(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exactTokensOfThis(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimEnable(
      flag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEndBlock(
      newEndBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReward(
      newRewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLeftOver(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _TOKEN_(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimEnable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    veiwRewardReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    veiwTotalReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewAmountOfThis(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
